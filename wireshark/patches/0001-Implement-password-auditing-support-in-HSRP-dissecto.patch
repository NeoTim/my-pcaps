From 0249b9a0f2e47a4b4233815a4ff89b8d392f6b88 Mon Sep 17 00:00:00 2001
From: Dhiru Kholia <kholia@kth.se>
Date: Mon, 26 Oct 2015 12:09:06 +0100
Subject: [PATCH] Implement password auditing support in HSRP dissector

HSRPv1 and HSRPv2 can uses MD5 Authentication TLV sequence for
authentication.

This patch exposes a new "HSRP hash" string in the protocol tree. This
allows password auditing of HSRP authentication messages using "John the
Ripper" software.

The new UI looks like,
https://raw.githubusercontent.com/kholia/my-pcaps/master/HSRP.png

Change-Id: Iedc49af04d1e603c197e4b327447e0c93f77cb5d
---
 epan/dissectors/packet-hsrp.c | 43 ++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 42 insertions(+), 1 deletion(-)

diff --git a/epan/dissectors/packet-hsrp.c b/epan/dissectors/packet-hsrp.c
index 810f916..7f9e463 100644
--- a/epan/dissectors/packet-hsrp.c
+++ b/epan/dissectors/packet-hsrp.c
@@ -154,6 +154,7 @@ static gint hf_hsrp_priority = -1;
 static gint hf_hsrp_group = -1;
 static gint hf_hsrp_reserved = -1;
 static gint hf_hsrp_auth_data = -1;
+static gint hf_hsrp_auth_hash = -1;
 static gint hf_hsrp_virt_ip_addr = -1;
 /* Advertise (3) */
 static gint hf_hsrp_adv_type = -1;
@@ -333,6 +334,12 @@ process_hsrp_md5_tlv_sequence(tvbuff_t *tvb, proto_tree *hsrp_tree, guint offset
         proto_item *ti;
         proto_tree *md5_auth_tlv;
 
+        guint tvb_len = tvb_captured_length(tvb);
+        gchar *audit_hash = NULL;
+        guint8 zero_pad[16] = {0};
+        guint bytes_written = 0;
+        const guint8 *ptr = NULL;
+
         ti = proto_tree_add_uint_format_value(hsrp_tree, hf_hsrp2_md5_auth_tlv, tvb, offset, 1, type, "Type=%d Len=%d", type, len);
         offset+=2;
 
@@ -349,6 +356,35 @@ process_hsrp_md5_tlv_sequence(tvbuff_t *tvb, proto_tree *hsrp_tree, guint offset
         proto_tree_add_item(md5_auth_tlv, hf_hsrp2_md5_key_id, tvb, offset, 4, ENC_BIG_ENDIAN);
         offset+=4; /* this now points to the start of the MD5 hash */
         proto_tree_add_item(md5_auth_tlv, hf_hsrp2_md5_auth_data, tvb, offset, 16, ENC_NA);
+
+        /* Make auditing of network authentication hashes easier (ONLY FOR DEMO! DO NOT APPLY!)
+         *
+         * salt => entire HSRP payload with last 16 bytes (in the MD5 Authentication TLV) replaced with zeroes.
+         *
+         * hash => last 16 bytes in the MD5 Authentication TLV
+         */
+        if (tvb_len > 72) { /* do not ignore this check! */
+                g_warning("[HSRP] payload length of %d is not supported currently, please report this bug!", tvb_len);
+                return;
+        }
+        #define MAX_BUFFER 512
+        if ((offset * 2) > (MAX_BUFFER - 6 - 32 -1 - 32 - ((tvb_len - offset - 16) * 2))) /* do not ignore this check */
+                return;
+
+        ptr = tvb_get_ptr(tvb, 0, tvb_captured_length(tvb)); /* entire HSRP payload, multi-byte access is not done using this */
+        audit_hash = (gchar *)wmem_alloc0(wmem_packet_scope(), MAX_BUFFER);
+        g_snprintf(audit_hash, MAX_BUFFER, "$hsrp$"); /* marker string, 6 bytes */
+                bytes_written+=6;
+        bytes_to_hexstr(audit_hash + bytes_written, ptr, offset); /* HSRP payload up to the start of the MD5 hash */ /* INSECURE */
+        bytes_written+=(offset*2);
+        bytes_to_hexstr(audit_hash + bytes_written, zero_pad, 16); /* zero pad, 16 bytes */ /* INSECURE */
+        bytes_written+=32;
+        bytes_to_hexstr(audit_hash + bytes_written, ptr + offset + 16, tvb_len - offset - 16); /* rest of the HSRP payload */ /* INSECURE */
+        bytes_written+=((tvb_len - offset - 16) * 2);
+        audit_hash[bytes_written] = '$'; /* separator, 1 byte */
+        bytes_written+=1;
+        bytes_to_hexstr(audit_hash + bytes_written, ptr + offset, 16); /* actual MD5 hash, 16 bytes */ /* INSECURE */
+        proto_tree_add_string(md5_auth_tlv, hf_hsrp_auth_hash, tvb, 0, tvb_len, audit_hash);
 }
 
 static int
@@ -816,7 +852,12 @@ void proto_register_hsrp(void)
                 { &hf_hsrp2_md5_auth_data,
                   { "MD5 Authentication Data", "hsrp2.md5_auth_data",
                     FT_BYTES, BASE_NONE, NULL, 0x0,
-                    "MD5 digest string is contained.", HFILL }}
+                    "MD5 digest string is contained.", HFILL }},
+
+                { &hf_hsrp_auth_hash,
+                  { "HSRP hash", "hsrp.hash",
+                    FT_STRING, BASE_NONE, NULL, 0x0,
+                    "Contains a \"John the Ripper\" compatible hash string for password auditing purposes", HFILL }}
         };
 
         static gint *ett[] = {
-- 
2.5.0

