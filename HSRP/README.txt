This problem is solved now!

https://github.com/magnumripper/JohnTheRipper/blob/bleeding-jumbo/run/hsrp2john.py

Important Functions
-------------------

*Internal* MD5 implementation is located at 0x099a5462 in "i86bi-linux-l3-ipbase-12.4.bin" file.

The external MD5 functionality is used for license checking stuff only.

R10's HSRP password is "password12345".

R20's HSRP password is "openwall12345".


MD5 digest calculation
-----------------------

The following fields are involved,

hellotime
holdtime
priority
group
reserved ?
auth ?
virtualIP
key_id
password :-)
more ?

See http://www.gotohack.org/2011/01/scapy-hsrp-md5-auth-dissecter-to.html page.

The question is how exactly is the internal MD5 function used to calculate the
the MD5 hash (which is at the end of HSRP packets).

Is it plain MD5 or HMAC-MD5?

This program uses a pretty weird calling convention and IDA Pro has trouble
in reconstructing the function arguments.

Setup
-----

# echo '127.42.42.42 xml.cisco.com' >> /etc/hosts

$ ./CiscoIOUKeygen.py > iourc  # generate license

$ ./start-1.sh

$ ./start-2.sh

$ ./iousniff -i /tmp/netio1000/  # used for capturing traffic between the routers

Files
-----

"linux_server" is the IDA Pro's debugger thing.

"funcap*.txt" are generated by IDA Pro's funcap plugin. They are
super interesting.

Links
-----

http://en.wikipedia.org/wiki/Hot_Standby_Router_Protocol

http://packetlife.net/blog/2008/oct/27/hijacking-hsrp/

Extra
-----

sudo apt-get install libnet-pcap-perl libpcap0.8

sudo apt-get install uml-utilities bridge-utils
